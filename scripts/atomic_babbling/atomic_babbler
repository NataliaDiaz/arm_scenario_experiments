#!/usr/bin/env python
''' This scripts control baxter so that it moves one joint at a time (hence atomic babbling)

It does not take care of recording itself directly but controls the recorder such that every movement is recorded in a separated bag file.
'''

import math
import random
import argparse

import rospy

from tf import transformations as tft
np = tft.numpy

from geometry_msgs.msg import Pose, Point,  Quaternion
from std_msgs.msg import Header, String, Empty
import baxter_interface
from baxter_interface import CHECK_VERSION
from arm_scenario_experiments import baxter_utils
import arm_scenario_simulator.head_simulator_fix # this is a patch to be able to control correctly the head in simulation. If not imported, the method Head.move_to_pan is not defined. Cf 

def main(do_joints):
    babbler = Atomic_Babbler(do_joints)
    reset_env = rospy.Publisher('/environment/reset', Empty, queue_size=1)
    last_time = rospy.get_time()
    for k in range(100):
        if rospy.get_time()-last_time>300:
            reset_env.publish(Empty())
            print("Reseting the environment")
            rospy.sleep(3)
            last_time = rospy.get_time()
        babbler.go_and_move()        
        

class Atomic_Babbler(object):

    def __init__(self, do_joints):
        # Command Current Joint Positions first
        self.left_arm = baxter_interface.Limb('left')
        self.right_arm = baxter_interface.Limb('right')
        #self.babbling_arm = self.left_arm if side is 'left' else self.right_arm
        self.head = baxter_interface.Head()
        self.do_joints = do_joints
        self.right_arm.move_to_joint_positions({name:start_pose[name] for name in self.right_arm.joint_names()})
        self.left_arm.move_to_joint_positions({name:start_pose[name] for name in self.left_arm.joint_names()})

        self.new_record_pub = rospy.Publisher('/recorder/start', String, latch = True, queue_size=1)
        self.stop_record_pub = rospy.Publisher('/recorder/stop', Empty, queue_size=1)
        self.counter =0

    def go_and_move(self):
        joint_angles=None
        while joint_angles == None:
            x = start_left_position['x'] + random.uniform(-1,1)*0.25
            y = start_left_position['y'] + random.uniform(-1,1)*0.25
            z = start_left_position['z'] + random.uniform(-1,1)*0.15
            o = slight_d(start_left_orientation,0.2,0.2)
            joint_angles = baxter_utils.IK(self.left_arm, Point(x,y,z), o)
        self.left_arm.move_to_joint_positions(joint_angles)
        self.counter +=1
        self.head.move_to_pan(random.uniform(-0.3,0.3), speed=1.5, blocking=True)
        
        rospy.sleep(1)
        if 'head_pan' in self.do_joints: self.turn_head(speed= 1.0, pause = 0.3)
        jiggle_params = {   'left_s0': {'normalized_targets': [-0.2,0.2], 'speed': 0.4, 'pause': 0.3, 'margin': 0.2},
                            'left_s1': {'normalized_targets': [-0.1,0.2], 'speed': 0.4, 'pause': 0.3, 'margin': 0.2},
                            'left_e0': {'normalized_targets': [-0.1,0.1], 'speed': 0.4, 'pause': 0.3, 'margin': 0.2},
                            'left_e1': {'normalized_targets': [-0.2,0.2], 'speed': 0.4, 'pause': 0.3, 'margin': 0.2}    }
        for joint in self.do_joints:
            if joint in jiggle_params:
                self.jiggle(joint, jiggle_params[joint]['normalized_targets'], jiggle_params[joint]['speed'], jiggle_params[joint]['pause'], jiggle_params[joint]['margin'])



    def turn_head(self, speed, pause):
        init_pan = self.head.pan()
        self.new_record_pub.publish(String( 'pose{}_head_pan'.format(self.counter) ))
        self.head.move_to_pan(-0.8, speed=speed, blocking=True)
        rospy.sleep(pause)
        self.head.move_to_pan(0.8, speed=speed, blocking=True)
        rospy.sleep(pause)
        self.head.move_to_pan(init_pan, speed=speed, blocking=True)
        self.stop_record_pub.publish(Empty())
        rospy.sleep(pause)


    def jiggle(self, joint_name, normalized_targets, speed, pause = 0, margin = 0):
        '''
        Make the joint move to the targets defined by their deltas w.r.t the current pose,
        deltas being the ratio of the angular difference and the magnitude
        Make a pause between each movement
        '''
        self.new_record_pub.publish(String(('pose{}_'+joint_name).format(self.counter)))
        init_pos = self.left_arm.joint_angles()[joint_name]
        prev_target = init_pos
        for nt in normalized_targets:
            target = init_pos + nt*magnitudes[joint_name]
            target = clip(target, joint_name, margin)
            move(self.left_arm, {joint_name: target}, length = abs(target-prev_target)/speed)
            prev_target = target
            rospy.sleep(pause)
        move(self.left_arm, {joint_name: init_pos}, length = abs(init_pos-prev_target)/speed )
        self.stop_record_pub.publish(Empty())
        rospy.sleep(pause)


def move(limb, target_positions, length, uprate=100):
    ''' Move linearly all the joints from their current position to the position specified in the target_positions dictionary
    The length of the movement has to be given. '''
    length = max(0.5,length)
    rate = rospy.Rate(uprate)
    tstart = rospy.get_time()
    start_joints = limb.joint_angles()
    names = target_positions.keys()
    while not rospy.is_shutdown():
        t = rospy.get_time() - tstart
        if t>length:break
        targets = {name: target_positions[name]*t/length + (length-t)*start_joints[name]/length for name in names}
        limb.set_joint_positions(targets)
        rate.sleep()


def slight_d(quat,stdvec,stda):
    ''' Returns a quaternion consisting of a slight deviation of the input quaternion '''
    v = [quat['x'],quat['y'],quat['z'],quat['w']]
    vec = tft.unit_vector(v[:3])
    a = 2*math.acos(v[3]) + random.random()*stda
    vec += np.random.uniform(-1,1,3)*stdvec
    vec =  math.sin(a/2)*tft.unit_vector(vec)
    return Quaternion(w=math.cos(a/2), x=vec[0], y=vec[1], z=vec[2])


def clip(x, name, margin_min=0, margin_max=None):
    ''' Clip the joint_angle between the min_value and max_value (the valid interval) of this joint_angle
    margins (in [0,1]) can be provided to addtionally reduce the valid interval. Limits are augmented/reduced by margin*magnitude(joint). '''
    margin_max = margin_max if margin_max else margin_min
    return min(max_ranges[name]-margin_max*magnitudes[name] , max(x, min_ranges[name]+margin_min*magnitudes[name]))
    
    
min_ranges = {'left_s0':-1.7016, 'left_s1':-2.147, 'left_e0':-3.0541, 'left_e1':-0.05,
                     'left_w0':-3.059, 'left_w1':-1.5707, 'left_w2':-3.059,
            'right_s0':-1.7016, 'right_s1':-2.147, 'right_e0':-3.0541, 'right_e1':-0.05,
                     'right_w0':-3.059, 'right_w1':-1.5707, 'right_w2':-3.059 }


max_ranges = {'left_s0':1.7016, 'left_s1':1.047, 'left_e0':3.0541, 'left_e1':2.618,
                     'left_w0':3.059, 'left_w1':2.094, 'left_w2':3.059,
            'right_s0':1.7016, 'right_s1':1.047, 'right_e0':3.0541, 'right_e1':2.618,
                                 'right_w0':3.059, 'right_w1':2.094, 'right_w2':3.059 }

magnitudes = {name:max_ranges[name]-min_ranges[name] for name in max_ranges.keys()}


all_names = ['head_pan', 'l_gripper_l_finger_joint', 'l_gripper_r_finger_joint',
            'left_e0', 'left_e1', 'left_s0', 'left_s1', 'left_w0', 'left_w1', 'left_w2',
            'r_gripper_l_finger_joint', 'r_gripper_r_finger_joint',
            'right_e0', 'right_e1', 'right_s0', 'right_s1', 'right_w0', 'right_w1', 'right_w2']

start_joint_angles1 = [0, 0, 0, -1.597, 1.751, -0.394, 0.050, -0.185, 0.027, -0.013, 0, 0, 1.552, 0.939, -1.049, -0.055, 0.303, 2.094, -1.424]
start_joint_angles2 = [0.345, 0.020, -0.020, -1.457, 1.406, -0.344, -0.119, -0.177, 0.405, -2.764, 0, -0.020, 1.545, 0.937, -1.044, -0.035, 0.301, 2.085, -1.417]
start_pose1, start_pose2 = {}, {}
for k in range(len(start_joint_angles1)): start_pose1[all_names[k]] = start_joint_angles1[k]
for k in range(len(start_joint_angles2)): start_pose2[all_names[k]] = start_joint_angles2[k]


start_left_position1 = {'x': 0.636, 'y': -0.386, 'z': 0.408}
start_left_orientation1 = {'x': 0.148, 'y': -0.680, 'z': 0.718, 'w': 0.0181}

start_left_position2 = {'x': 0.80, 'y': -0.30, 'z': 0.50}
start_left_orientation2 = {'x': 0.729, 'y': -0.033, 'z': 0.173, 'w': 0.660 }

'''
middle of the screen
'''
start_left_position3 = {'x': 0.877, 'y': -0.003, 'z': 0.552}
start_left_orientation3 = {'x': -0.044, 'y': -0.669, 'z': 0.735, 'w': -0.098}

start_left_position4 = {'x': 0.793, 'y': -0.142, 'z': 0.565}
start_left_orientation4 = {'x': -0.014, 'y': -0.69, 'z': 0.703, 'w': -0.164}


start_pose = start_pose2
start_left_position = start_left_position4
start_left_orientation = start_left_orientation4


if __name__ == "__main__":    
    parser = argparse.ArgumentParser()
    parser.add_argument( '-j', '--joints', type=str, required=False, nargs='+', default=[], help="joints to be babbled")
    parser.add_argument( '-a', '--all', action='store_true', default=False, help="babble all available joints (incompatible with --joints)")
    parser.add_argument( '-e', '--excepts', type=str, required=False, nargs='+', default=[], help="exclude joints from babbled one (incompatible with --joints)")
    args = parser.parse_args(rospy.myargv()[1:])

    available_joints =['head_pan','left_s0', 'left_s1', 'left_e0', 'left_e1']
    available_joints_str = ( '\n'.join(available_joints) )+'\n'

    if args.all:
        if len(args.joints)>0: rospy.logerr('Inconsistent option : cannot specify both --all and --joints')
        else: do_joints = available_joints
        for j in args.excepts:
            if j in available_joints: do_joints.remove(j)
            else: rospy.logerr('Unkown joint "'+j+'", available_joints:\n'+available_joints_str)
    else:
        if args.joints is []: rospy.logerr('You must specify some joints (or -a for all).\nAvailable joint:\n'+available_joints_str)
        else:
            do_joints =[]
            for j in args.joints:
                if j in available_joints: do_joints.append(j)
                else: rospy.logerr('Unkown joint "'+j+'", available_joints:\n'+available_joints_str)

    print("Initializing babbler node... ")
    print('Babble joints :', ', '.join(do_joints))
    rospy.init_node("atomic_babbler")
    print("Getting robot state... ")
    rs = baxter_interface.RobotEnable(CHECK_VERSION)
    print("Enabling robot... ")
    rs.enable()
    print("Running. Ctrl-c to quit")
    
    try: 
        main(do_joints)
    except rospy.ROSInterruptException: 
        pass
