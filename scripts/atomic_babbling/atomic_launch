#!/usr/bin/env python
# -*- coding: utf-8 -*-

import roslaunch
import rospy
import time
import os

import baxter_interface
from baxter_interface import CHECK_VERSION
from arm_scenario_experiments import baxter_utils

'''
Supported Frame Size Modes: Frame sizes at which the cameras will operate.
1280x800
960x600
640x400
480x300
384x240
320x200
'''

sub_folder = '_'.join(time.ctime().split())
data_folder = '/home/masson/ros_bags/'+sub_folder # -------Â change this folder to whatever you want #TODO: Why is this still working?
os.system('mkdir -p '+data_folder)

recording_rate = 10
cameras_fps = 50
cameras_resolution = [(640, 400), (640, 400)]#(320,200)  # this is not being effective, images are 800x800 for the arm and 900 and the head camera are 640x400 pixels
cameras = ['/cameras/head_camera_2/image', '/cameras/left_hand_camera/image', '/cameras/right_hand_camera/image'] # left is the useful operative one in our arm_scenario_experiments

_REAL_ROBOT = baxter_utils.is_real_robot()

def republished_name(topic): return topic+"/republished"

if _REAL_ROBOT: topics_to_record = [republished_name(topic)+"/compressed" for topic in cameras]
else : topics_to_record = [topic+"/compressed" for topic in cameras]
topics_to_record += ['/robot/joint_states']
topics_arg = ' '.join(topics_to_record)

def set_cameras():
    if _REAL_ROBOT:
        head_cam = baxter_interface.CameraController('head_camera')
        right_hand_cam = baxter_interface.CameraController('right_hand_camera')
        left_hand_cam = baxter_interface.CameraController('left_hand_camera')
        head_cam.resolution = cameras_resolution
        head_cam.fps = cameras_fps
        right_hand_cam.resolution = cameras_resolution
        right_hand_cam.fps = cameras_fps


def main():
    while os.system('rosrun arm_scenario_experiments atomic_init_pose') is not 0 : pass

    launch = roslaunch.scriptapi.ROSLaunch()
    launch.start()

    republishers = []
    if  _REAL_ROBOT:
        for topic in cameras:
            republishers.append(launch.launch(roslaunch.core.Node('image_transport', 'republish', args="raw in:="+topic+" out:="+republished_name(topic) )))
    env = launch.launch(roslaunch.core.Node('arm_scenario_simulator', 'spawn_objects_example' ))
    babbler = launch.launch(roslaunch.core.Node('arm_scenario_experiments', 'atomic_babbler', args='-j head_pan' ))
    recorder = launch.launch(roslaunch.core.Node('arm_scenario_experiments', 'recorder', args='-r '+str(recording_rate)+' -p '+data_folder+' --topics '+topics_arg+' --prefix /recorded'))

    while(not babbler.is_alive()): time.sleep(1)
    print('babbling has started')
    while(babbler.is_alive()): time.sleep(1)
    print('babbling has finished')

    try:
        recorder.stop()
        for rep in republishers: rep.close()
    except Exception: pass
    launch.stop()


if __name__ == '__main__':
    print("Initializing node... ")
    rospy.init_node('Experience_launcher')
    print("Getting robot state... ")
    rs = baxter_interface.RobotEnable(CHECK_VERSION)
    print("Enabling robot... ")
    rs.enable()
    print("Running. Ctrl-c to quit")

    set_cameras()
    main()
