#!/usr/bin/env python
'''This node allows to record topics while giving the ability to another node to control (when starting/when stopping/in which file) to record, via services.

Take as argument a rate, a path to a directory where to save bag files in and a list of topics.
  + By default, the recorder does not write to a bagfile the messages published on the topics. A call to the services `recorder/new_bag` and `recorder/start_recording` have to be done (by another node or through a `rosservice call /recorder/new_bag <name>` in a terminal ). Recording can then be stopped via the service `recorder/stop_recording`
  + If an additional argument --start is given, then the recorder will start immediatly recording in a bag file named 'record'
'''

import argparse

import rospy

from std_msgs.msg import String
from std_srvs.srv import Trigger
from ann4smc.srv import String as StringSrv
from ann4smc import Recorder

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=Recorder.__doc__)
    parser.add_argument( '-n', '--name', type=int, default='recorder', help="the recorder name")
    parser.add_argument( '-r', '--rate', type=int, required=True, help="the recording rate")
    parser.add_argument( '-p', '--path', type=str, required=True, help="the directory in which bags will be written")
    parser.add_argument( '--topics', type=str, required=False, nargs='+', default=[], help="topics to be recorded")
    parser.add_argument( '--prefix', type=str, required=False, default='', help="a prefix appended to topics in the bag file")
    parser.add_argument( '--start', action='store_true', default=False, help="start recording directly at creation")
    args = parser.parse_args(rospy.myargv()[1:])

    rospy.loginfo("Initializing recorder node... ")
    rospy.init_node(args.name)
    rospy.loginfo('rate : '+str(args.rate))
    rospy.loginfo('path : '+args.path)
    rospy.loginfo('topics : '+(' '.join(args.topics)) )
    if args.prefix is not '':
        rospy.loginfo('prefix : '+str(args.prefix))
    print("Press Ctrl-C to stop.")

    recorder = Recorder(args.path, args.prefix, args.topics)
    rospy.on_shutdown(recorder.close_bag)
    recording = False
    rate = rospy.Rate(args.rate) if args.rate>0 else None

    def new_bag_callback(request):
        try: 
            recorder.new_bag(request.message)
            return {'sucess': True}
        except Exception as e: 
            return {'sucess': False, 'message': e.message}
    
    def close_bag_callback(request):
        recording = False
        recorder.close_bag()
        return {'sucess': True}

    def start_recording(request):  
        if recorder.bag: 
            return {'sucess': True}
        else:      
            recording = True
            return {'sucess': False, 'message': e.message}

    def stop_recording(request):
        recording = False
        return {'sucess': True}

    rospy.Service('/'+args.name+'/new_bag', StringSrv, new_bag_callback)
    rospy.Service('/'+args.name+'/close_bag', Trigger, close_bag_callback)
    rospy.Service('/'+args.name+'/start_recording', Trigger, start_recording )
    rospy.Service('/'+args.name+'/stop_recording', Trigger, stop_recording)

    if args.start:
        rospy.loginfo('Starting recording right now')
        recorder.new_bag('record')
        recording = True

    try:         
        while not rospy.is_shutdown():
            if rate: rate.sleep()
            if recording:
                recorder.check_topics()
                recorder.dump_all()
    except rospy.ROSInterruptException: 
        pass


