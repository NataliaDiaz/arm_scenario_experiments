#!/usr/bin/env python

import argparse
import time

import rospy
import rosbag
import rostopic

from std_msgs.msg import (Header, String, Empty)
import compressed_image_transport
from sensor_msgs.msg import (JointState, Image, CompressedImage)

''' 
Record the given topics at a given rate.
The rate MUST be specified and be an integer.
'''

class Recorder(object):
    def __init__(self, path, rate, topics):
        self.path = path
        self.rate = rospy.Rate(rate) if rate and rate>0 else None
        self.on = False
        self.topics= topics
        self.recorded_topics = {}
        self.latches = {}
        self.lastMessages = {}

        rospy.Subscriber('/recorder/start', String, new_record_callback, queue_size = 1)
        rospy.Subscriber('/recorder/stop', Empty, end_record_callback, queue_size = 1)
        self.count = 0
        self.spin()


    def new_record_callback(self, message):
        joint_name = message.data
        bag_name = self.path+'/'+joint_name+'.bag'
        print('Creating new bag : '+bag_name)
        self.bag = rosbag.Bag(bag_name, 'w')
        self.on = True

    def end_record_callback(self, message):
        print('Closing the bag')
        self.on = False
        self.bag.close()

    ''' Callback for recording signals'''
    def make_write_callback(self, topic):
        written_topic = self.recorded_topics[topic]
        def callback(message):
            self.count +=1
            if self.on:
                while self.latches[topic]: pass
                self.latches[topic] = True
                if self.rate: self.lastMessages[topic] = [message]
                else: self.lastMessages[topic].append( message )
                self.latches[topic] = False
        return callback

    def new_topic_name(topic):
        written_topic = '/recorded'
        if topic[0]!='/': written_topic+='/'
        return written_topic+topic

    def check_topics(self):
        for topic in self.topics:
            if topic in self.recorded_topics: continue
            self.recorded_topics[topic] = Recorder.new_topic_name(topic)
            self.lastMessages[topic] = []
            self.latches[topic] = False
            message_class = rostopic.get_topic_class(topic)[0]
            if message_class:
                callback = self.make_write_callback(topic)
                rospy.Subscriber(topic, message_class, callback, queue_size = 10)

    def spin(self):
        while not rospy.is_shutdown():
            if self.rate: self.rate.sleep()
            self.check_topics()
            for topic, written_topic in self.recorded_topics.iteritems():
                while self.latches[topic]: pass
                self.latches[topic] = len(self.lastMessages[topic])>0
                try:
                    for msg in self.lastMessages[topic]:
                        self.bag.write(written_topic, msg)
                        self.lastMessages[topic] = []
                finally:
                    self.latches[topic] = False

        print('fin')
        print(self.count)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=Recorder.__doc__)
    parser.add_argument( '-r', '--rate', type=int, required=True, help="the recording rate")
    parser.add_argument( '-t', '--topic', type=str, required=True, nargs='+' , help="topics to be resampled")
    parser.add_argument( '-p', '--path', type=str, required=True, help="the path to the record file")
    args = parser.parse_args(rospy.myargv()[1:])

    print("Initializing node... ")
    rospy.init_node('state_recorder', anonymous=True)
    print("Recording. Press Ctrl-C to stop.")
    print('rate : ', args.rate)
    print('path : ', args.path)
    print('topics : ', ' '.join(args.topic))
    Recorder(args.path, args.rate, args.topic)
